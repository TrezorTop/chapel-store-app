datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}


generator client {
  provider = "prisma-client-js"
}


model User {
    username String @id
    passwordHash String
    role Role @default(USER)
    tokens RefreshToken[]
    purchases Purchases[]

    createdAt DateTime @default(now())
}


enum Role {
  USER
  ADMIN
}


model RefreshToken {
    token String @id
    owner User @relation(fields: [ownerUsername], references: [username], onDelete: Restrict)
    ownerUsername String
}


model Car {
    id String @id @default(cuid())
    name String @unique
    configs Config[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
}


model Bundle {
    id String @id @default(cuid())
    name String @unique
    configs Config[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
}


model Purchases {
    owner User @relation(fields: [ownerUsername], references: [username], onDelete: Restrict)
    ownerUsername String
    config Config @relation(fields: [configId], references: [id], onDelete: Restrict)
    configId String
    @@id([ownerUsername, configId])

    createdAt DateTime @default(now())
}


model Config {
    id String @id @default(cuid())
    title String
    car Car @relation(fields: [carId], references: [id], onDelete: Restrict)
    carId String
    bundle Bundle @relation(fields: [bundleId], references: [id], onDelete: Restrict)
    bundleId String
    softDeleted Boolean @default(false)
    purchases Purchases[]

    files File[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
}


model File {
    name String @id
    originalName String
    size String
    config Config @relation(fields: [configId], references: [id], onDelete: Restrict)
    configId String
}